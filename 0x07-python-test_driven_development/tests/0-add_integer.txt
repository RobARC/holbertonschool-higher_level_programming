>>> add_integer = __import__('0-add_integer').add_integer

1.Test two ints

>>> add_integer(1, 2)
3

2.Test  one negative

>>> add_integer(-1, 1)
0

3.Test high number

>>> add_integer(10000000000000000, 10)
10000000000000010

4.Test one float

>>> add_integer(10.0, 3)
13

5.Test a like string

>>> add_integer("h", 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

6.Test b like string

>>> add_integer(2, "o")
Traceback (most recent call last):
	...
TypeError: b must be an integer

7.Test one int

>>> add_integer(2)
100

8.Test high number

>>> add_integer(9*10**99, 9 * 10**99)
18000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

>>> add_integer(2, [2,2])
Traceback (most recent call last):
	...
TypeError: b must be an integer

9.Test b as infinity

>>> add_integer(2, 100e1000)
Traceback (most recent call last):
	...
OverflowError: cannot convert float infinity to integer

10.Test float overflow

>>> add_integer(99.0**999999999, 1)
Traceback (most recent call last):
	...
OverflowError: (34, 'Numerical result out of range')

11.Test for nan

>>> add_integer(float("nan"))
Traceback (most recent call last):
	...
ValueError: cannot convert float NaN to integer
 
12.Test two negatives

>>> add_integer(-2, -2)
-4

13.Test two floats

>>> add_integer(9.5, 10.9)
19

14.Test a like a list

>>> add_integer([3,3,], 7)
Traceback (most recent call last):
	...
TypeError: a must be an integer

15.Check that the file is executable
>>> import os
>>> os.access('0-add_integer.py', os.X_OK)            
True

16.Check coments of the functions

>>> len(__import__("0-add_integer").__doc__) > 10   
True

17.Check for the documentation of the function 

>>> len(__import__("0-add_integer").add_integer.__doc__) > 10
True

18.Check for a newline at the end of the file
>>> os.popen("cat -e 0-add_integer.py | tail -1").read()[-1]
'\n'

19. NONE
>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer

20.README

>>> readme = os.getcwd()
>>> readme1 = readme + '/README.md'
>>> os.path.exists(readme1)
True

