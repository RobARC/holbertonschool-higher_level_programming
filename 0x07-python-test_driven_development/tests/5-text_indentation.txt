>>> text_indentation = __import__('5-text_indentation').text_indentation

1.Check that the file is executable
>>> import os
>>> os.access('5-text_indentation.py', os.X_OK)
True

2.Check coments of the functions

>>> len(__import__("5-text_indentation").__doc__) > 10
True

3.Check for the documentation of the function

>>> len(__import__("5-text_indentation").text_indentation.__doc__) > 10
True

4.Check for a newline at the end of the file
>>> os.popen("cat -e 5-text_indentation.py | tail -1").read()[-1]
'\n'

5.Check for pep8 style
>>> os.popen("pep8 5-text_indentation.py").read()
''

6.Check for None
>>> text_indentation(None)
Traceback (most recent call last):
	...
TypeError: text must be a string

7.Check two arguments
>>> text_indentation("Hello", "World")
Traceback (most recent call last):
	...
TypeError: text_indentation() takes 1 positional argument but 2 were given

8.check 3 ??? 
>>> text_indentation("???")
?
<BLANKLINE>
?
<BLANKLINE>
?
<BLANKLINE>

9.Check a list
text_indentation([1, 2, 3])
Traceback (most recent call last):
	...
TypeError: text must be a string

10.Check for integer positive
>>> text_indentation(7777)
Traceback (most recent call last):
	...
TypeError: text must be a string

11.Check for integer negative
>>> text_indentation(-7777)
Traceback (most recent call last):
	...
TypeError: text must be a string

12.Check Only delimiters
>>> text_indentation(".?:")
.
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>

13. Check for a tupple
>>> text_indentation(('Hola', 'Mundo', 'Hello'))
Traceback (most recent call last):
	...
TypeError: text must be a string


14. CHeck a empty string
>>> text_indentation("")

15.Check severeal spaces2
>>> text_indentation("?     .    :")
?
<BLANKLINE>
.
<BLANKLINE>
:
<BLANKLINE>

16.Check Holberto.School
>>> text_indentation("Holberton.School")
Holberton.
<BLANKLINE>
School

17.Check only simple coma
>>> text_indentation('Hola, Mundo')
Hola, Mundo

18.Check a set
>>> text_indentation({ id: "007" })
Traceback (most recent call last):
	...
TypeError: text must be a string



